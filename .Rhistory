library(shiny)
?tabsetPanel()
?bslib::bs_theme
scales::show_col("#424242")
?bslib::page_navbar
?scales::label_number()
scales::label_number(big.mark = ",")(10000)
scales::label_number(scale_cut = scales::cut_short_scale())(10000)
?ggplot2::scale_x_discrete
dplyr::count(mtcars, cyl)
dplyr::count(mtcars, cyl) |> dplyr::distinct(n) |> dplyr::pull()
dplyr::count(iris, Species) |> dplyr::distinct(n) |> dplyr::pull()
dplyr::count(iris, Species) #|> dplyr::distinct(n) |> dplyr::pull()
iris[, "Species"] |> unique()
iris[, "Species"] |> unique() |> length()
table(iris$Species)
table(iris$Species) |> unname()
table(iris$Species) |> unname() |> unique()
table(iris[["Species"]]) |> unname() |> unique()
table(mtcars[["cyl"]]) |> unname() |> unique()
runApp('~/R/shiny apps/test app/test_2.R')
runApp()
?shinycssloaders::withSpinner
?cluster::pam
?cluster::clara
1000*0.1
?kmeans
?cluster::agnes
?cluster::diana
?hclust
# library(bs4Dash)
# library(bslib)
library(shinyWidgets)
?kmeans
?cluster::clara
?c
c(1:5, 10.5, "next")
?pickerInput
?kmeans
?cluster::clara
?hclust
?cluster::agnes
?actionBttn
?updateNumericInput
1000 * 0.1
1000*0.2
ff <- readr::read_csv(
"C:/Users/AYOMIDE/Documents/R/shiny apps/segmentationAnalysisApp/data/demo_data.csv"
)
ff
library(dplyr)
?cluster::agnes
ff |>
select(income, total_amount_spent, total_purchase)
ff$income |> scale()
ff$income |> scale() |> head()
f <- ff$income |> scale() #|> head()
f[,1]
scale(ff$income)[,1]
ff |>
select(income, total_amount_spent, total_purchase) |>
mutate(across(everything(), scale(.)[,1]))
ff |>
select(income, total_amount_spent, total_purchase) |>
mutate(across(everything(), ~scale(.x)[,1]))
ff |>
select(income, total_amount_spent, total_purchase) |>
mutate(across(everything(), ~scale(.x)[,1])) |>
cluster::agnes(metric = "euclidean", keep.data = FALSE, method = "average")
ff |>
select(income, total_amount_spent, total_purchase) |>
mutate(across(everything(), ~scale(.x)[,1])) |>
cluster::agnes(metric = "manhattan", keep.data = FALSE, method = "average")
ff |>
select(income, total_amount_spent, total_purchase) |>
mutate(across(everything(), ~scale(.x)[,1])) |>
cluster::agnes(metric = "manhattan", keep.data = FALSE, method = "median")
?hclust
?cluster::diana
mtcars |>
summarise(min = min(mpg), max = max(mpg))
library(ggplot2)
mtcars |>
group_by(cyl) |>
summarise(min = min(mpg), max = max(mpg))
mtcars |>
group_by(cyl) |>
summarise(min = min(mpg), max = max(mpg)) |>
ggplot() +
geom_segment(aes(x = min, xend = max, y = cyl, yend = cyl),
linetype = "twodash")
mtcars |>
group_by(cyl) |>
summarise(min = min(mpg), max = max(mpg)) |>
ggplot() +
geom_segment(aes(x = min, xend = max, y = cyl, yend = cyl),
linetype = "twodash") +
geom_point(aes(x = Minimum, y = .segment), size = 5,
shape  = 21,
color  = "azure3",
fill   = "azure4",
stroke = 1.5) +
geom_point(aes(x = Maximum, y = .segment), size = 8,
shape  = 21,
color  = "gray70",
fill   = "gray26",
stroke = 1.5)
mtcars |>
group_by(cyl) |>
summarise(min = min(mpg), max = max(mpg)) |>
ggplot() +
geom_segment(aes(x = min, xend = max, y = cyl, yend = cyl),
linetype = "twodash") +
geom_point(aes(x = min, y = cyl), size = 5,
shape  = 21,
color  = "azure3",
fill   = "azure4",
stroke = 1.5) +
geom_point(aes(x = max, y = cyl), size = 8,
shape  = 21,
color  = "gray70",
fill   = "gray26",
stroke = 1.5)
# agnes method .............
num_lb <- "Income"
mtcars |>
group_by(cyl) |>
summarise(min = min(mpg), max = max(mpg)) |>
ggplot() +
geom_segment(aes(x = min, xend = max, y = cyl, yend = cyl),
linetype = "twodash") +
geom_point(aes(x = min, y = cyl), size = 5,
shape  = 21,
color  = "azure3",
fill   = "azure4",
stroke = 1.5) +
geom_point(aes(x = max, y = cyl), size = 8,
shape  = 21,
color  = "gray70",
fill   = "gray26",
stroke = 1.5) +
theme_minimal() +
labs(title = glue::glue("<span style = 'font-size:13pt'>
<span style='color:{'azure4'};'>Minimum</span> &
<span style='color:{'gray26'};'>Maximum</span>
{num_lb} In Each Segment </span>"))
mtcars |>
group_by(cyl) |>
summarise(min = min(mpg), max = max(mpg)) |>
ggplot() +
geom_segment(aes(x = min, xend = max, y = cyl, yend = cyl),
linetype = "twodash") +
geom_point(aes(x = min, y = cyl), size = 5,
shape  = 21,
color  = "azure3",
fill   = "azure4",
stroke = 1.5) +
geom_point(aes(x = max, y = cyl), size = 8,
shape  = 21,
color  = "gray70",
fill   = "gray26",
stroke = 1.5) +
theme_minimal() +
labs(title = glue::glue("<span style = 'font-size:13pt'>
<span style='color:{'azure4'};'>Minimum</span> &
<span style='color:{'gray26'};'>Maximum</span>
{num_lb} In Each Segment </span>")) +
theme(plot.title = ggtext::element_markdown(lineheight = 1.1),
plot.background = element_rect(fill = "#F5F5F5", color = "#F5F5F5"))
glue::glue("<span style = 'font-size:13pt'>
<span style='color:{'azure4'};'>Minimum</span> &
<span style='color:{'gray26'};'>Maximum</span>
{num_lb} In Each Segment </span>")
mtcars |>
group_by(cyl) |>
summarise(min = min(mpg), max = max(mpg)) |>
ggplot() +
geom_segment(aes(x = min, xend = max, y = cyl, yend = cyl),
linetype = "twodash") +
geom_point(aes(x = min, y = cyl), size = 5,
shape  = 21,
color  = "azure3",
fill   = "azure4",
stroke = 1.5) +
geom_point(aes(x = max, y = cyl), size = 8,
shape  = 21,
color  = "gray70",
fill   = "gray26",
stroke = 1.5) +
theme_minimal() +
labs(title = glue::glue("<span style = 'font-size:13pt'> <span style='color:{'azure4'};'>Minimum</span> & <span style='color:{'gray26'};'>Maximum</span> {num_lb} In Each Segment </span>")) +
theme(plot.title = ggtext::element_markdown(lineheight = 1.1),
plot.background = element_rect(fill = "#F5F5F5", color = "#F5F5F5"))
mtcars |>
group_by(cyl) |>
summarise(min = min(mpg), max = max(mpg)) |>
ggplot() +
geom_segment(aes(x = min, xend = max, y = cyl, yend = cyl),
linetype = "twodash") +
geom_point(aes(x = min, y = cyl), size = 5,
shape  = 21,
color  = "azure3",
fill   = "azure4",
stroke = 1.5) +
geom_point(aes(x = max, y = cyl), size = 8,
shape  = 21,
color  = "gray70",
fill   = "gray26",
stroke = 1.5) +
theme_minimal() +
labs(title = glue::glue("<span style = 'font-size:13pt'>  /
<span style='color:{'azure4'};'>Minimum</span> & /
<span style='color:{'gray26'};'>Maximum</span> /
{num_lb} In Each Segment </span>")) +
theme(plot.title = ggtext::element_markdown(lineheight = 1.1),
plot.background = element_rect(fill = "#F5F5F5", color = "#F5F5F5"))
mtcars |>
group_by(cyl) |>
summarise(min = min(mpg), max = max(mpg)) |>
ggplot() +
geom_segment(aes(x = min, xend = max, y = cyl, yend = cyl),
linetype = "twodash") +
geom_point(aes(x = min, y = cyl), size = 5,
shape  = 21,
color  = "azure3",
fill   = "azure4",
stroke = 1.5) +
geom_point(aes(x = max, y = cyl), size = 8,
shape  = 21,
color  = "gray70",
fill   = "gray26",
stroke = 1.5) +
theme_minimal() +
labs(title = glue::glue("<span style = 'font-size:13pt'>  //
<span style='color:{'azure4'};'>Minimum</span> & //
<span style='color:{'gray26'};'>Maximum</span> //
{num_lb} In Each Segment </span>")) +
theme(plot.title = ggtext::element_markdown(lineheight = 1.1),
plot.background = element_rect(fill = "#F5F5F5", color = "#F5F5F5"))
?glue::glue
mtcars |>
group_by(cyl) |>
summarise(min = min(mpg), max = max(mpg)) |>
ggplot() +
geom_segment(aes(x = min, xend = max, y = cyl, yend = cyl),
linetype = "twodash") +
geom_point(aes(x = min, y = cyl), size = 5,
shape  = 21,
color  = "azure3",
fill   = "azure4",
stroke = 1.5) +
geom_point(aes(x = max, y = cyl), size = 8,
shape  = 21,
color  = "gray70",
fill   = "gray26",
stroke = 1.5) +
theme_minimal() +
labs(title = glue::glue("<span style = 'font-size:13pt'> \
<span style='color:{'azure4'};'>Minimum</span> & \
<span style='color:{'gray26'};'>Maximum</span> \
{num_lb} In Each Segment </span>")) +
theme(plot.title = ggtext::element_markdown(lineheight = 1.1),
plot.background = element_rect(fill = "#F5F5F5", color = "#F5F5F5"))
mtcars |>
group_by(cyl) |>
summarise(min = min(mpg), max = max(mpg)) |>
ggplot() +
geom_segment(aes(x = min, xend = max, y = cyl, yend = cyl),
linetype = "twodash") +
geom_point(aes(x = min, y = cyl), size = 5,
shape  = 21,
color  = "azure3",
fill   = "azure4",
stroke = 1.5) +
geom_point(aes(x = max, y = cyl), size = 8,
shape  = 21,
color  = "gray70",
fill   = "gray26",
stroke = 1.5) +
theme_minimal() +
labs(title = glue::glue("<span style = 'font-size:13pt'> \\
<span style='color:{'azure4'};'>Minimum</span> & \\
<span style='color:{'gray26'};'>Maximum</span> \\
{num_lb} In Each Segment </span>")) +
theme(plot.title = ggtext::element_markdown(lineheight = 1.1),
plot.background = element_rect(fill = "#F5F5F5", color = "#F5F5F5"))
?scales::label_number
? htmltools::tagQuery
f <- data.frame(xx = c(45, 78, 58, NA),
yy = c("ff", "tt", NA, NA),
zz = 10:13)
f
#' Check for missing values
#'
#' @param df user uploaded data
#'
#' @return Boolean
#' @export
#'
#' @examples
check_for_missing_values <- function(df) {
if (is.data.frame(df)) {
vapply(df, \(.x) sum(is.na(.x)) > 1, FUN.VALUE = logical(1)) |>
any()
}
check_for_missing_values(f)
library(testthat)
length(45:50)
?expect_true
check_for_missing_values(f)
check_for_missing_values(f) |> expect_true()
check_for_missing_values(iris) |> expect_true()
test_that("check_for_missing_values return TRUE when there is a missing value in the data & FALSE if There isn't", {
testthat::local_edition(3)
with_na <- data.frame(xx = c(45, 78, 58, NA), yy = c("ff", "tt", NA, NA), zz = 10:13)
without_na <- data.frame(xx = 45:50, yy = letters[1:6])
expect_true(check_for_missing_values(with_na))
expect_false(check_for_missing_values(without_na))
})
#' Drop missing values
#'
#' @param df user uploaded data
#' @param missing_threshold The percentage of missing values a variable can have
#' to be removed.
#'
#' @return data frame
#' @export
#'
#' @examples
drop_all_missing_values <- function(df, missing_threshold = 75) {
vars_with_large_NAs <- vapply(df,
\(.x) (sum(is.na(.x))/nrow(df))*100 >= missing_threshold,
FUN.VALUE = logical(1))
f_tbl <- df[!vars_with_large_NAs]
f_tbl[complete.cases(f_tbl), ]
}
with_na <- data.frame(xx = c(45, 78, 58, NA), yy = c("ff", "tt", NA, NA), zz = 10:13)
drop_all_missing_values(with_na)
drop_all_missing_values(with_na, 50)
drop_all_missing_values(with_na, 75)
test_that("drop_all_missing_values() drops all missing value", {
testthat::local_edition(3)
with_na <- data.frame(xx = c(45, 78, 58, NA), yy = c("ff", "tt", NA, NA), zz = 10:13)
expect_true(
drop_all_missing_values(with_na) |>
check_for_missing_values()
)
})
drop_all_missing_values(with_na)
drop_all_missing_values(with_na) |>
check_for_missing_values()
test_that("drop_all_missing_values() drops all missing value", {
testthat::local_edition(3)
with_na <- data.frame(xx = c(45, 78, 58, NA), yy = c("ff", "tt", NA, NA), zz = 10:13)
expect_false(
drop_all_missing_values(with_na) |>
check_for_missing_values()
)
})
with_na <- data.frame(xx = c(45, 78, NA, NA), yy = c("ff", NA, NA, NA), zz = 10:13)
drop_all_missing_values(with_na, 75)
drop_all_missing_values(with_na, 50)
f <- data.frame(xx = c("ut", "tu"), zz = c(1, 2))
f[, !zz]
f <- data.frame(xx = c("ut", "tu"), zz = c(1, 2))
f[, !"zz"]
f[, "ut"]
f[, "xx"]
?`]`
?data.frame
f[, "xx", drop = FALSE]
#'
#' @param df user uploaded data
#' @param missing_threshold The percentage of missing values a variable can have
#' to be removed.
#'
#' @return data frame
#' @export
#'
#' @examples drop_all_missing_values(upload_data, 50)
#'
drop_all_missing_values <- function(df, missing_threshold = 75) {
vars_with_large_NAs <- vapply(df,
\(.x) (sum(is.na(.x))/nrow(df))*100 >= missing_threshold,
FUN.VALUE = logical(1))
f_tbl <- df[!vars_with_large_NAs, drop = FALSE]
f_tbl[complete.cases(f_tbl), ]
}
drop_all_missing_values(with_na, 50)
f[, "xx", .drop = FALSE]
f[, "xx", drop = FALSE]
f[, "xx"]
#'
#' @param df user uploaded data
#' @param missing_threshold The percentage of missing values a variable can have
#' to be removed.
#'
#' @return data frame
#' @export
#'
#' @examples drop_all_missing_values(upload_data, 50)
#'
drop_all_missing_values <- function(df, missing_threshold = 75) {
vars_with_large_NAs <- vapply(df,
\(.x) (sum(is.na(.x))/nrow(df))*100 >= missing_threshold,
FUN.VALUE = logical(1))
f_tbl <- df[,!vars_with_large_NAs, drop = FALSE]
f_tbl[complete.cases(f_tbl), ]
}
drop_all_missing_values(with_na, 50)
#'
#' @param df user uploaded data
#' @param missing_threshold The percentage of missing values a variable can have
#' to be removed.
#'
#' @return data frame
#' @export
#'
#' @examples drop_all_missing_values(upload_data, 50)
#'
drop_all_missing_values <- function(df, missing_threshold = 75) {
vars_with_large_NAs <- vapply(df,
\(.x) (sum(is.na(.x))/nrow(df))*100 >= missing_threshold,
FUN.VALUE = logical(1))
f_tbl <- df[, !vars_with_large_NAs, drop = FALSE]
f_tbl[complete.cases(f_tbl), ]
}
drop_all_missing_values(with_na, 50)
#'
#' @param df user uploaded data
#' @param missing_threshold The percentage of missing values a variable can have
#' to be removed.
#'
#' @return data frame
#' @export
#'
#' @examples drop_all_missing_values(upload_data, 50)
#'
drop_all_missing_values <- function(df, missing_threshold = 75) {
vars_with_large_NAs <- vapply(df,
\(.x) (sum(is.na(.x))/nrow(df))*100 >= missing_threshold,
FUN.VALUE = logical(1))
f_tbl <- df[, !vars_with_large_NAs, drop = FALSE]
f_tbl[complete.cases(f_tbl), ]
}
drop_all_missing_values(with_na, 50)
drop_all_missing_values(with_na, 75)
with_na[, "yy", drop = FALSE]
#'
#' @param df user uploaded data
#' @param missing_threshold The percentage of missing values a variable can have
#' to be removed.
#'
#' @return data frame
#' @export
#'
#' @examples drop_all_missing_values(upload_data, 50)
#'
drop_all_missing_values <- function(df, missing_threshold = 75) {
vars_with_large_NAs <- vapply(df,
\(.x) (sum(is.na(.x))/nrow(df))*100 >= missing_threshold,
FUN.VALUE = logical(1))
f_tbl <- df[, !vars_with_large_NAs, drop = FALSE]
f_tbl[complete.cases(f_tbl), , drop = FALSE]
}
drop_all_missing_values(with_na, 75)
drop_all_missing_values(with_na, 50)
test_that("drop_all_missing_values() drops all columns with missing value based on the missing_threshold", {
testthat::local_edition(3)
with_na <- data.frame(xx = c(45, 78, NA, NA), yy = c("ff", NA, NA, NA), zz = 10:13)
# with <= 50%  -------------------------------------------------------------->
expect_equal(
1,
drop_all_missing_values(with_na, 50) |> ncol()
)
})
drop_all_missing_values(with_na, 70)
test_that("drop_all_missing_values() drops all columns with missing value based on the missing_threshold", {
testthat::local_edition(3)
with_na <- data.frame(xx = c(45, 78, NA, NA), yy = c("ff", NA, NA, NA), zz = 10:13)
# with >= 50% --------------------------------------------------------------->
expect_equal(
1,
drop_all_missing_values(with_na, 50) |> ncol()
)
# with <= 70% --------------------------------------------------------------->
expect_equal(
2,
drop_all_missing_values(with_na, 70) |> ncol()
)
})
drop_all_missing_values(with_na, 100)
test_that("drop_all_missing_values() drops all columns with missing value based on the missing_threshold", {
testthat::local_edition(3)
with_na <- data.frame(xx = c(45, 78, NA, NA), yy = c("ff", NA, NA, NA), zz = 10:13)
# with >= 50% --------------------------------------------------------------->
expect_equal(
1,
drop_all_missing_values(with_na, 50) |> ncol()
)
# with <= 70% --------------------------------------------------------------->
expect_equal(
2,
drop_all_missing_values(with_na, 70) |> ncol()
)
# with 100% ----------------------------------------------------------------->
expect_equal(
3,
drop_all_missing_values(with_na, 100) |> ncol()
)
})
with_na[complete.cases(with_na), ]
