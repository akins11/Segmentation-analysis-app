## Fill the DESCRIPTION ----
## Add meta data about your application
##
## /!\ Note: if you want to change the name of your app during development,
## either re-run this function, call golem::set_golem_name(), or don't forget
## to change the name in the app_sys() function in app_config.R /!\
##
golem::fill_desc(
pkg_name = "segmentationAnalysisApp", # The Name of the package containing the App
pkg_title = "Market Segmentation Analysis Application", # The Title of the package containing the App
pkg_description = "A shiny application that performs market/customer segmentation using cluster analysis.", # The Description of the package containing the App
author_first_name = "Ayomide", # Your First Name
author_last_name = "Akinwande", # Your Last Name
author_email = "akinwande24ayomide@gmail.com", # Your Email
repo_url = NULL # The URL of the GitHub Repo (optional)
)
## Set {golem} options ----
golem::set_golem_options()
usethis::use_readme_rmd(open = FALSE)
?usethis::use_lifecycle_badge
usethis::use_lifecycle_badge("stable")
## Init Testing Infrastructure ----
## Create a template for tests
golem::use_recommended_tests()
?golem::use_favicon()
?golem::use_utils_ui
# go to dev/02_dev.R
rstudioapi::navigateToFile("dev/02_dev.R")
## Dependencies ----
## Amend DESCRIPTION with dependencies read from package code parsing
## install.package('attachment') # if needed.
attachment::att_amend_desc()
?attachment::att_amend_desc()
## Add modules ----
## Create a module infrastructure in R/
golem::add_module(name = "load_data", with_test = TRUE) # Name of the module
golem::add_module(name = "select_variables", with_test = TRUE) # Name of the module
## Fill the DESCRIPTION ----
## Add meta data about your application
##
## /!\ Note: if you want to change the name of your app during development,
## either re-run this function, call golem::set_golem_name(), or don't forget
## to change the name in the app_sys() function in app_config.R /!\
##
golem::fill_desc(
pkg_name = "segmentationAnalysisApp", # The Name of the package containing the App
pkg_title = "Market Segmentation Analysis Application", # The Title of the package containing the App
pkg_description = "A shiny application that performs market/customer segmentation using cluster analysis.", # The Description of the package containing the App
author_first_name = "Ayomide", # Your First Name
author_last_name = "Akinwande", # Your Last Name
author_email = "akinwande24ayomide@gmail.com", # Your Email
repo_url = NULL # The URL of the GitHub Repo (optional)
)
## Set {golem} options ----
golem::set_golem_options()
golem::add_module(name = "run_cluster_analysis", with_test = TRUE)
golem::add_module(name = "cluster_summary", with_test = TRUE)
golem::add_module(name = "assign_segments", with_test = TRUE)
golem::add_module(name = "segmentaion_summary", with_test = TRUE)
## Add helper functions ----
## Creates fct_* and utils_*
golem::add_fct("load_data", with_test = TRUE)
golem::add_fct("run_cluster_analysis", with_test = TRUE)
golem::add_fct("cluster_summary", with_test = TRUE)
golem::add_fct("assign_segments", with_test = TRUE)
golem::add_fct("segmentaion_summary", with_test = TRUE)
golem::add_css_file("custom")
## Add internal datasets ----
## If you have data in your package
usethis::use_data_raw(name = "demo_data", open = FALSE)
#' Run the Shiny Application
#'
#' @param ... arguments to pass to golem_opts.
#' See `?golem::get_golem_options` for more details.
#' @inheritParams shiny::shinyApp
#'
#' @export
#' @importFrom shiny shinyApp
#' @importFrom golem with_golem_options
run_app <- function(
onStart = NULL,
options = list(),
enableBookmarking = NULL,
uiPattern = "/",
...
) {
with_golem_options(
app = shinyApp(
ui = app_ui,
server = app_server,
onStart = onStart,
options = options,
enableBookmarking = enableBookmarking,
uiPattern = uiPattern
),
golem_opts = list(...)
)
}
golem::add_fct("react_table", with_test = TRUE)
usethis::use_package("ggplot2")
# You're now set! ----
# go to dev/03_deploy.R
rstudioapi::navigateToFile("dev/03_deploy.R")
usethis::use_package("shinyWidgets")
# shiny:: shinyWidgets:: reactable::
shiny::tags$div
## External resources
## Creates .js and .css files at inst/app/www
golem::add_js_file("script")
#' Clean User Supplied Segments.
#'
#'@description vectorize user supplied segments.
#'
#' @param x character: A string of all segments separated by a comma or space.
#'
#' @return vector of supplied segments.
#' @export
#'
#' @examples
get_user_segments <- function(x) {
supplied_segment <- strsplit(x, ",")  |> unlist() |> as.character() |> trimws()
supplied_segment[grep("[a-zA-Z]", supplied_segment)]
}
library(testthat)
test_that("get_user_segments() returns a character vactor", {
get_user_segments("High, Middel, Low")
})
?test_that
test_that("get_user_segments() returns a character vactor", {
expect_equal(get_user_segments("High, Middel, Low"),
c("High", "Middle", "Low"))
})
get_user_segments("High, Middel, Low")
test_that("get_user_segments() returns a character vactor", {
expect_equal(get_user_segments("High, Middle, Low"),
c("High", "Middle", "Low"))
})
test_that("get_user_segments() returns a character vactor", {
# Correct input
expect_equal(get_user_segments("High, Middle, Low"),
c("High", "Middle", "Low"))
# Wrong input
expect_equal(get_user_segments("High, Middle Low"),
c("High", "Middle Low"))
})
test_that("get_user_segments() returns a character vactor", {
# Correct input
expect_equal(get_user_segments("High, Middle, Low"),
c("High", "Middle", "Low"))
# Wrong input
expect_equal(get_user_segments("High, Middle Low"),
c("High", "Middle Low"))
expect_equal(get_user_segments("High Middle Low"),
c("High Middle Low"))
})
setwd("~/segmentationAnalysisApp/man/figures/seg_a_upload_page.png")
usethis::use_package("shinyWidgets")
usethis::use_package("shinyjs")
usethis::use_package("shinycssloader")
usethis::use_package("bslib")
usethis::use_package("shinycssloader")
usethis::use_package("reactable")
usethis::use_package("reactablefmtr")
usethis::use_package("dplyr")
usethis::use_package("purrr")
usethis::use_package("tibble")
usethis::use_package("stringr")
usethis::use_package("forcats")
usethis::use_package("ggplot2")
usethis::use_package("rlang")
usethis::use_package("tidyselect")
usethis::use_package("readxl")
usethis::use_package("vroom")
usethis::use_package("cluster")
usethis::use_package("parameters")
usethis::use_package("datawizard")
usethis::use_package("NbClust")
usethis::use_package("tidytext")
usethis::use_package("broom")
usethis::use_package("scales")
usethis::use_package("janitor")
usethis::use_package("shinycssloaders")
usethis::use_package("ggtext")
